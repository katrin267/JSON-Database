type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: "import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.File;\n\
    import java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\n\
    \nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\npublic\
    \ class JsonDatabaseTest extends StageTest<String> {\n\n    private static final\
    \ String OK_STATUS = \"OK\";\n    private static final String ERROR_STATUS = \"\
    ERROR\";\n    private static final String NO_SUCH_KEY_REASON = \"No such key\"\
    ;\n\n    private static final String WRONG_EXIT = \"The server should stop when\
    \ client sends 'exit' request\";\n\n    private static final String fileName =\
    \ \"data.json\";\n    private static final String serverFolderPath = System.getProperty(\"\
    user.dir\") + File.separator +\n        \"src\" + File.separator +\n        \"\
    server\" + File.separator +\n        \"data\";\n    private static final String\
    \ serverJsonFileName = serverFolderPath + File.separator + fileName;\n\n    private\
    \ static final String clientFolderPath = System.getProperty(\"user.dir\") + File.separator\
    \ +\n        \"src\" + File.separator +\n        \"client\" + File.separator +\n\
    \        \"data\";\n\n    private static final Gson gson = new Gson();\n\n   \
    \ private static final String setFileContent = JsonBuilder.newBuilder()\n    \
    \    .addValue(\"type\", \"set\")\n        .addValue(\"key\", \"person\")\n  \
    \      .addJsonObject(\"value\", JsonBuilder.newBuilder()\n            .addValue(\"\
    name\", \"Elon Musk\")\n            .addJsonObject(\"car\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"model\", \"Tesla Roadster\")\n              \
    \      .addValue(\"year\", \"2018\")\n                    .getAsJsonObject()\n\
    \            )\n            .addJsonObject(\"rocket\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"name\", \"Falcon 9\")\n                    .addValue(\"\
    launches\", \"87\")\n                    .getAsJsonObject())\n            .getAsJsonObject())\n\
    \        .getAsString();\n\n    private static final String getFileContent = JsonBuilder.newBuilder()\n\
    \        .addValue(\"type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"\
    [person, name]\", JsonArray.class))\n        .getAsString();\n\n    private static\
    \ final String secondGetFileContent = JsonBuilder.newBuilder()\n        .addValue(\"\
    type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"[person]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String deleteFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"delete\")\n      \
    \  .addValue(\"key\", gson.fromJson(\"[person, car, year]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String updateFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"set\")\n        .addValue(\"\
    key\", gson.fromJson(\"[person, rocket, launches]\", JsonArray.class))\n     \
    \   .addValue(\"value\", \"88\")\n        .getAsString();\n\n    private static\
    \ int threadsCount;\n\n    @DynamicTestingMethod\n    CheckResult checkExit()\
    \ {\n\n        TestedProgram server = getServer();\n        server.startInBackground();\n\
    \n        TestedProgram client = getClient();\n        client.start(\"-t\", \"\
    exit\");\n\n        try {\n            Thread.sleep(50);\n        } catch (InterruptedException\
    \ e) {\n            e.printStackTrace();\n        }\n\n        if (!server.isFinished())\
    \ {\n            server.stop();\n            return CheckResult.wrong(WRONG_EXIT);\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTestingMethod\n\
    \    CheckResult checkJsonFile() throws IOException {\n\n        if (!Files.exists(Paths.get(serverFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /server/data folder\");\n\
    \        }\n\n        if (!Files.exists(Paths.get(serverJsonFileName))) {\n  \
    \          return CheckResult.wrong(\"Can't find \" + fileName + \" file in the\
    \ /server/data folder\");\n        }\n\n        if (!Files.exists(Paths.get(clientFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /client/data folder\");\n\
    \        }\n\n        createJsonFiles();\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static void createJsonFiles() throws IOException {\n   \
    \     Files.write(Paths.get(clientFolderPath + File.separator + \"setFile.json\"\
    ),\n            List.of(setFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"getFile.json\"\
    ),\n            List.of(getFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"secondGetFile.json\"\
    ),\n            List.of(secondGetFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"deleteFile.json\"\
    ),\n            List.of(deleteFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"updateFile.json\"\
    ),\n            List.of(updateFileContent),\n            StandardCharsets.UTF_8);\n\
    \    }\n\n    @DynamicTestingMethod\n    CheckResult testInputs() throws InterruptedException\
    \ {\n        \n        threadsCount = getThreadCount();\n\n        TestedProgram\
    \ server = getServer();\n        server.startInBackground();\n\n        TestedProgram\
    \ client;\n        String output;\n\n        String requestJson;\n        String\
    \ responseJson;\n        \n        client = getClient();\n        output = client.start(\"\
    -t\", \"set\", \"-k\", \"1\", \"-v\", \"Hello world!\");\n        requestJson\
    \ = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n \
    \           .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", \"1\")\n                .value(\"\
    value\", \"Hello world!\")\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        //\
    \ Files\n        client = getClient();\n        output = client.start(\"-in\"\
    , \"setFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"key\", \"person\")\n                .value(\"value\"\
    , isObject()\n                    .value(\"name\", \"Elon Musk\")\n          \
    \          .value(\"car\", isObject()\n                        .value(\"model\"\
    , \"Tesla Roadster\")\n                        .anyOtherValues()\n           \
    \         )\n                    .anyOtherValues()\n                )\n      \
    \          .anyOtherValues()\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        client\
    \ = getClient();\n        output = client.start(\"-in\", \"getFile.json\");\n\
    \        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\", \"name\"\
    ))\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", \"Elon Musk\")\n            );\n\n\n  \
    \      client = getClient();\n        output = client.start(\"-in\", \"updateFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", isArray(\"person\", \"rocket\"\
    , \"launches\"))\n                .value(\"value\", \"88\")\n            );\n\
    \        responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .anyOtherValues()\n                    )\n\
    \            );\n\n\n        client = getClient();\n        output = client.start(\"\
    -in\", \"deleteFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"delete\")\n                .value(\"key\"\
    , isArray(\"person\", \"car\", \"year\"))\n            );\n        responseJson\
    \ = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .value(\"car\", isObject()\n             \
    \               .value(\"model\", \"Tesla Roadster\")\n                      \
    \  )\n                        .anyOtherValues()\n                    )\n     \
    \       );\n        checkIfThreadWasCreated();\n\n\n        client = getClient();\n\
    \        client.start(\"-t\", \"exit\");\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static TestedProgram getClient() {\n        return new TestedProgram(client.Main.class);\n\
    \    }\n\n    private static TestedProgram getServer() {\n        return new TestedProgram(server.Main.class);\n\
    \    }\n\n    private static int getThreadCount() {\n        return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();\n\
    \    }\n\n    private static void checkIfThreadWasCreated() {\n\n        int total\
    \ = getThreadCount();\n\n        /*8 threads: 1 server thread and 7 client threads\
    \ created during the test.\n         If the server doesn't handle clients in a\
    \ new thread then the difference between number of threads\n         before and\
    \ after the test should be equal 8 */\n        if (total - threadsCount == 8)\
    \ {\n            throw new WrongAnswer(\"Looks like you don't process client connection\
    \ in another thread.\\n\" +\n                \"Every client request should be\
    \ parsed and handled in a separate thread!\\n\" +\n                (total - threadsCount));\n\
    \        }\n    }\n\n    @AfterClass\n    public static void deleteFiles() {\n\
    \        try {\n            Files.delete(Paths.get(clientFolderPath + File.separator\
    \ + \"setFile.json\"));\n            Files.delete(Paths.get(clientFolderPath +\
    \ File.separator + \"getFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"secondGetFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"deleteFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"updateFile.json\"));\n        } catch (IOException ignored)\
    \ {\n        }\n\n        String filePath = serverFolderPath + File.separator\
    \ + fileName;\n        String tempFilePath = serverFolderPath + File.separator\
    \ + \"temp.json\";\n\n        try {\n            Files.copy(Paths.get(tempFilePath),\
    \ Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);\n            Files.delete(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n    }\n\n    @BeforeClass\n\
    \    public static void copyFiles() {\n\n        String filePath = serverFolderPath\
    \ + File.separator + fileName;\n        String tempFilePath = serverFolderPath\
    \ + File.separator + \"temp.json\";\n\n        try {\n            Files.createFile(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.copy(Paths.get(filePath), Paths.get(tempFilePath), StandardCopyOption.REPLACE_EXISTING);\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.write(Paths.get(filePath), \"{}\".getBytes());\n        } catch (IOException\
    \ ignored) {\n        }\n    }\n}\n"
  learner_created: false
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {

        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addValue(String key, JsonElement value) {
            jsonObject.add(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/CellBase.java
  visible: true
  text: |
    package server;

    import com.google.gson.Gson;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import com.google.gson.reflect.TypeToken;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.reflect.Type;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.concurrent.locks.Lock;
    import java.util.concurrent.locks.ReadWriteLock;
    import java.util.concurrent.locks.ReentrantReadWriteLock;

    public class CellBase {
        final static String ERROR = "{\"response\":\"ERROR\",\"reason\":\"No such key\"}";
        final static String OK = "{\"response\":\"OK\"}";
        final static String pathToFile = "C:\\Users\\Георгий\\IdeaProjects\\JSON Database\\JSON Database\\task\\src\\server\\data\\db.json";

        private Map<String, String> cellBase = new HashMap<>();

        ReadWriteLock lock = new ReentrantReadWriteLock();
        Lock readLock = lock.readLock();
        Lock writeLock = lock.writeLock();

        public CellBase() {
            fillBase();
        }

        private void fillBase() {
    //        String pathToFile = "server/data/db.json";
    //        String pathToFile = "C:\\Users\\Георгий\\IdeaProjects\\JSON Database\\JSON Database\\task\\src\\server\\data\\db.json";
            Type itemsMapType = new TypeToken<Map<String, String>>() {
            }.getType();

            try (Scanner scanner = new Scanner(new File(pathToFile))) {
                cellBase = new Gson().fromJson(scanner.nextLine(), itemsMapType);
    //            System.out.println(cellBase.toString());
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        private void updateBase() {
            writeLock.lock();
    //        File file = new File("server/data/db.json");
    //        File file = new File("C:\\Users\\Георгий\\IdeaProjects\\JSON Database\\JSON Database\\task\\src\\server\\data\\db.json");
            String jsonStr = new Gson().toJson(cellBase);
    //        System.out.println("update" + jsonStr);
            try (FileWriter writer = new FileWriter(new File(pathToFile))) {
                writer.write(jsonStr);
            } catch (IOException e) {
                System.out.printf("An exception occurs %s", e.getMessage());
            }
            writeLock.unlock();
        }

        public String setString(String key, String value) {
            cellBase.put(key, value);
            updateBase();
            return OK;
        }

        public String getString(JsonObject jsonObject) {
    //        if (cellBase.containsKey(key)) {
    //            return "{\"response\":\"OK\",\"value\":\"" + cellBase.get(key) + "\"}";
    //        }
    //        return ERROR;
            JsonArray requestArray = jsonObject.getAsJsonArray("key");
            return null;
        }

        public String delString(String key) {
            if (cellBase.containsKey(key)) {
                cellBase.remove(key);
                updateBase();
                return OK;
            }
            return ERROR;
        }

        public String exit() {
            return OK;
        }
    }
  learner_created: true
- name: src/client/RequestParser.java
  visible: true
  text: |-
    package client;

    import com.beust.jcommander.JCommander;
    import com.beust.jcommander.Parameter;
    import com.google.gson.Gson;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.Scanner;


    public class RequestParser {
        @Parameter(names = "-t", description = "the type of the request")
        private String requestType;
        @Parameter(names = "-k", description = "the index of the cell")
        private String indexOfCeil;
        @Parameter(names = "-v", description = "the value to save in the database")
        private String value;
        @Parameter(names = "-in", description = "file name to read request")
        private String fileName;

        public RequestParser(String[] iCommand) {
            JCommander.newBuilder()
                    .addObject(this)
                    .build()
                    .parse(iCommand);
        }

        public String serializeToJson() {

            if (fileName != null) {
    //            String pathToFile = "client/data/" + fileName;
                String pathToFile = "C:\\Users\\Георгий\\IdeaProjects\\JSON Database\\JSON Database\\task\\src\\client\\data\\testGet.json";
                try (Scanner scanner = new Scanner(new File(pathToFile))) {
                    StringBuilder stringBuilder = new StringBuilder();
                    while (scanner.hasNext()) {
                        stringBuilder.append(scanner.nextLine());
                    }
                    return stringBuilder.toString();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }

            Map<String, String> request = new LinkedHashMap<>();
            request.put("type", requestType);
            request.put("key", indexOfCeil);
            request.put("value", value);

            return new Gson().toJson(request);

        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import com.google.gson.Gson;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class Server implements Runnable {
        final static String EXIT = "EXIT";

        ServerSocket serverSocket;
        Socket socket;
        ClientRequest request;
        JsonObject jobject;

        public Server(Socket socket, ServerSocket serverSocket) {
            this.socket = socket;
            this.serverSocket = serverSocket;
        }

        @Override
        public void run() {
            try (
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            ) {
                String userInput = input.readUTF();

                JsonElement jelement = JsonParser.parseString(userInput);
                System.out.println(jelement);
                jobject = jelement.getAsJsonObject();

                System.out.println(jobject);
                String type = jobject.get("Type").getAsString();
                System.out.println(type);
    //            Gson gson = new Gson();
    //            request = gson.fromJson(userInput, ClientRequest.class);
                String answer = getAnswer(type);

                output.writeUTF(answer);

                if (request.getType().equals("exit")) {
                    serverSocket.close();
                }

                input.close();
                output.close();

                socket.close();

            } catch (IOException e) {
                e.printStackTrace();
            }

        }

        private String getAnswer(String type) {

            switch (type) {
                case "get":
                    return Main.cellBase.getString(jobject);
                case "set":
                    return Main.cellBase.setString(request.getKey(), request.getValue());
                case "delete":
                    return Main.cellBase.delString(request.getKey());
                case "exit":
                    return Main.cellBase.exit();
                default:
                    return EXIT;
            }
        }

    }
  learner_created: true
- name: src/server/data/db.json
  visible: true
  text: '{"text":"Some text here","1":"HelloWorld!"}'
  learner_created: true
- name: src/server/data/data.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/353/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 21 Dec 2020 16:30:25 UTC
record: -1
